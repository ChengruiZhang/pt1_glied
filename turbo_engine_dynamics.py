import numpy as np
import time
import math

try:
    # get monotonic time to ensure that time deltas are always positive
    _current_time = time.monotonic
except AttributeError:
    # time.monotonic() not available (using python < 3.3), fallback to time.time()
    _current_time = time.time
    warnings.warn('time.monotonic() not available in python < 3.3, using time.time() as fallback')


class TurboEngine():

    def __init__(self, current_action, action_space_dim=1, time_constant=1/30, gain=1, steps_action_history_length=10):
        self.T = time_constant  # t = 1/f; video game f = 30Hz
        self.K = gain

        # self.K = delta_y / delta_e

        self.a = np.zeros(action_space_dim)  # idling engines at start

        self.last_time = None
        # self.output_limits=(-1,1) # set action_limit in ddpg

    def pt1_glied(self, next_a):
        # input:
        # next_a: new action generated by policy (SAC/DDPG)
        #
        # output: updated action through PT1 controller which goes into the Lunar Lander environment
        # utilizes action history from TurboEngine class

        # https://de.wikipedia.org/wiki/PT1-Glied

        now = _current_time()
        # time passed
        if self.last_time:
            dt = now - self.last_time
        else:
            dt = 1e-16

        error = next_a - self.a
        response = (1-math.exp(dt/self.T))*error
        self.a = self.a + response

        # update time to now
        self.last_time = now

        # # ToDo update action history in class
        # self.y_n_min_1 = y_n
        return self.a

    def reset(self):
        self.a = 0.0  # idling engines at start